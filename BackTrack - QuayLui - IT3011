#include<bits/stdc++.h>
const int MAXN = 1e3 + 1;
using namespace std;
    int dx[] = {-1,-1,-1,0,0,1,1,1};
    int dy[] = {-1,0,1,-1,1,-1,0,1};
    char A[MAXN][MAXN];
    bool check[MAXN][MAXN];
    int n,m,k;
    vector<string>v;
    vector<string>res;
    void backtrack( int i, int j, string s ){
        
        for ( int k = 0 ; k < v.size() ; k++ ){
            if (v[k] == s) res.push_back(s);
        }
        check[i][j] = 1;
        for ( int k = 0 ; k <= 7 ; k++ ){
            int i1 = i + dy[k];
            int j1 = j + dx[k];
            if ( i1 >= 1 && i1 <= n && j1 >= 1 && j1 <= m && check[i1][j1] == 0) {
            backtrack(i1,j1,s + A[i1][j1]);
            check[i1][j1] = 0;
        }
        }
    }
    void solve(){
        
        std::cin>>k>>n>>m;
        
        for ( int i = 0 ; i < k ; i++ ){
            string u;
            std::cin>>u;
            v.push_back(u);
        }
        
        for ( int i = 1 ; i <= n ; i++ ){
            for ( int j = 1 ; j <= m ; j++ ){
                std::cin>>A[i][j];
            }
        }
        memset(check,0,sizeof(check));
        for ( int i = 1 ; i <= n ; i++ ){
            for ( int j = 1 ; j <= m ; j++ ){
                memset(check,0,sizeof(check));
                string s = "";
                if (check[i][j] == 0) backtrack(i,j,s + A[i][j]);    
                    
                }
            }
            if ( res.size() == 0 ) std::cout<<"-1";
            else {
                for ( auto x : res )
                std::cout<<x<<" ";
            }
        }
        int main(){
            int t;
            std::cin>>t;
            while (t--){
            res.clear();
            v.clear();
            solve();
            }
            return 0;
        }
    
    
