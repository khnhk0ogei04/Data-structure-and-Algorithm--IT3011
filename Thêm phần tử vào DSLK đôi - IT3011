#include<bits/stdc++.h>
using namespace std;
    struct node{
        int data;
        node *prev;
        node *next;
    };
    struct doulist{
        node *head;
        node *tail;
    };
    doulist *CreateList ( int x ){
        doulist *l = new doulist;
        l->head = new node;
        l->head->data = x;
        l->head->prev = NULL;
        l->head->next = NULL;
        l->tail = l->head;
        return l;
    }
    doulist *AddHead( doulist *l, int x ){
        node *temp = new node;
        temp->data = x;
        temp->prev = NULL;
        temp->next = l->head;
        l->head->prev = temp;
        l->head = temp;
        return l; 
    }
    doulist *AddTail ( doulist *l ,int x ){
        node *temp = new node;
        temp->data = x;
        temp->next = NULL;
        temp->prev = l->tail;
        l->tail->next = temp;
        l->tail = temp;
        return l;
    }
    doulist *AddAt ( doulist *l, int k, int x ){
        node *q = l->head;
        for ( int i = 0 ; i < k - 1 ; i++ ){
            q = q->next;
        }
        node *temp = new node;
        temp->data = x;
        temp->next = q->next;
        q->next->prev = temp;
        q->next = temp;
        temp->prev = q;
        return l;
    }
    void PrintList ( doulist *l ){
        node *p = l->head;
        while ( p != NULL ){
            std::cout<<p->data<<" ";
            p = p->next;
        }
    }
    int main(){
        int n,k,x;
        std::cin>>n>>x;
        doulist *l = CreateList(x);
        for ( int i = 0 ; i < n - 1 ; i++ ){
            std::cin>>x;
            l = AddTail(l,x);
        }
        std::cin>>k>>x;
        if ( k == 0 ){
            l = AddHead(l,x);
        }
        else {
            if ( k == n ){
            l = AddTail(l,x);
            }
            else {
            l = AddAt(l,k,x);
            }
        }
        PrintList(l);
        return 0;
    }
