#include<bits/stdc++.h>
using namespace std;
    struct node{
        int data;
        node *prev;
        node *next;
    };
    struct doulist{
        node *head;
        node *tail;
    };
    doulist *CreateList ( int x ){
        doulist *l = new doulist;
        l->head = new node;
        l->head->data = x;
        l->head->prev = l->head->next = NULL;
        l->tail = l->head;
        return l;
    }
    doulist *AddTail( doulist *l, int x ){
        node *temp = new node;
        temp->data = x;
        temp->next = NULL;
        temp->prev = l->tail;
        l->tail->next = temp;
        l->tail = temp;
        return l;   
    }
    doulist *DeleteHead( doulist *l ){
        node *p = l->head->next;
        node *temp = l->head;
        p->prev = NULL;
        delete(temp);
        l->head = p;
        return l;
    }
    doulist *DeleteTail ( doulist *l ){
        node *p = l->tail->prev;
        node *temp = l->tail;
        p->next = NULL;
        delete(temp);
        l->tail = p;
        return l;
    }
    doulist *DeleteAt ( doulist *l , int k ){
        node *p = l->head;
        for ( int i = 0 ; i < k - 1 ; i++ ){
            p = p->next;
        }
        node *temp = p->next;
        node *p2 = p->next->next;
        p->next = p->next->next;
        p2->prev = p;
        delete(temp);
        return l;
    }
    void PrintList ( doulist *l ){
        node *p = l->head;
        while ( p != NULL ){
            std::cout<<p->data<<" ";
            p = p->next;
        }
    }
    int main(){
        int n,k,x;
        std::cin>>n>>x;
        doulist *l = CreateList(x);
        for ( int i = 0 ; i < n - 1 ; i++ ){
            std::cin>>x;
            l = AddTail(l,x);
        }
        std::cin>>k;
        if ( k == 0 ){
            l = DeleteHead(l);
        }
        else if ( k == n - 1 ){
            l = DeleteTail(l);
        }
        else l = DeleteAt(l,k);
        PrintList(l);
        return 0;
    }
