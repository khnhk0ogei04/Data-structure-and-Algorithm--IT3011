#include<bits/stdc++.h>
const int MAXN = 1e2 + 1;
const int inf = 1e9 + 7;

    std::vector<std::pair<int,int>>adj[MAXN];
    int dist[MAXN][MAXN];
    int n,m,a,b,c,d,r;
    void inp(){
        std::cin>>n>>m;
        for ( int i = 1 ; i <= m ; i++){
            int u,v,w;
            std::cin>>u>>v>>w;
            adj[u].push_back({v,w});
            adj[v].push_back({u,w});
        }
        std::cin>>a>>b>>c>>d>>r;
    }
    void dijikstra( int s ){
        std::vector<int>d(n+1,inf);
        d[s] = 0;
        std::priority_queue<std::pair<int,int>, std::vector<std::pair<int,int>>, std::greater<std::pair<int,int>>>pq;
        pq.push({0,s});
        while (!pq.empty()){
            std::pair<int,int>top = pq.top(); 
            pq.pop();
            int u = top.second;
            int kc = top.first;
            if ( kc > d[u] ) continue;
            for ( auto v: adj[u] ){
                int p = v.first;
                int q = v.second;
                if ( d[u] + q < d[p] ){
                    d[p] = d[u] + q;
                    pq.push({d[p],p});
                }
            }
        }
        for ( int i = 0 ; i < n ; i++ ){
            dist[s][i] = d[i];
        }
    }
    int ok = 0;
    bool visited[MAXN][MAXN];
    struct edge{
        int m,n;
        int kc;
    };
    std::vector<edge>res;

    void backtrack( int u, int v){
        visited[u][v] = true;
        edge e;
        e.m = u; e.n = v; e.kc = dist[u][v];
        res.push_back(e);
        if ( u == c && v == d ) {
            ok = 1;
            return;
        }
        if ( ok == 1 ) {
             return;
        }
        std::vector<int>v1;
        std::vector<int>v2;
        for ( auto x: adj[u] ) v1.push_back(x.first);
        for ( auto x: adj[v] ) v2.push_back(x.first);
            for ( int j: v1 ) {
                if (dist[j][v] > r && !visited[j][v] && !ok)
                backtrack(j,v);
            }
            for ( int k: v2 ){
                if (dist[u][k] > r && !visited[u][k] && !ok)
                backtrack(u,k);
            
        }
    }
    
    int main(){
        inp();
        for( int i = 0; i < n ; i++ ){
            dijikstra(i);
        }
        backtrack(a,b);
        if (ok) {
        for ( int i = 0 ; i < res.size() ; i++ ){
                std::cout<<res[i].m<<" "<<res[i].n<<" "<<res[i].kc;
                std::cout<<std::endl;
            }
        }
        else std::cout<<"Khong the";
        return 0;
    }
    
