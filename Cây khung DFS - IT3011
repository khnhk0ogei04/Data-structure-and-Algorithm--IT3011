#include<bits/stdc++.h>
const int MAXN = 1e3 + 1;
using namespace std;
    int n,m,u,parent[MAXN],sz[MAXN];
    bool visited[MAXN];
    std::vector<std::pair<int,int>>res;
    std::vector<int>adj[MAXN];
    void inp(){
        for ( int i = 1 ; i <= n ; i++ ){
            parent[i] = i;
            sz[i] = 1;
        }
    }
    int find ( int u ){
        if ( u == parent[u] ) return u;
        else return parent[u] = find(parent[u]);
    }
    bool Union( int u, int v ){
        u = find(u);
        v = find(v);
        if ( u == v ) return false;
        else {
            if (sz[u] < sz[v]) std::swap(u,v);
            sz[u] += sz[v];
            parent[v] = u;
            return true;
        }
    }
    void dfs( int u ){
        visited[u] = true;
        for ( int v : adj[u] ){
            if (!visited[v]){
                res.push_back({u,v});
                dfs(v);
            }
        }
    }
    int main(){
        std::cin>>n>>m>>u;
        std::memset(visited,false,sizeof(visited));
        for ( int i = 1 ; i <= m ; i++ ){
            int a,b;
            std::cin>>a>>b;
            adj[a].push_back(b);
            adj[b].push_back(a);
        }
        dfs(u);
    if ( res.size() < n - 1 ) std::cout<<"-1";
    else {
    for ( auto x: res ){
        std::cout<<x.first<<" "<<x.second;
        std::cout<<std::endl;
    }
    }
    return 0;
    }
