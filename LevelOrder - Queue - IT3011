#include<bits/stdc++.h>
using namespace std;
    int n;
    struct node{
        int data;
        node *left;
        node *right;
    };
    node *a;
    void findnode ( node *t , int val ){
        if ( t != NULL ){
            if ( t->data == val ) a  =  t;
        
        else {
            findnode(t->left,val);
            findnode(t->right,val);
        }
    }
    }
    node *insert ( node *t, int x, int y, char s ){
        if ( t != NULL ){
            node *temp = new node;
            temp->data = y;
            temp->left = temp->right = NULL;
            findnode(t,x);
            if ( s == 'L' ) a->left = temp;
            else a->right = temp;
        }
        return t;
    }
    void PreOrder( node *t ){
        if (t != NULL) {
            std::cout<<t->data<<" ";
            PreOrder(t->left);
            PreOrder(t->right);
        }
    }
    void InOrder( node *t ){
        if (t != NULL) {
            InOrder(t->left);
            std::cout<<t->data<<" ";
            InOrder(t->right);
        }
    }
    void PostOrder( node *t ){
        if (t != NULL) {
            PostOrder(t->left);
            PostOrder(t->right);
            std::cout<<t->data<<" ";
        }
    }
    vector<int>res;
    int main(){
        int t;
        std::cin>>t;
        while (t--){
            std::cin>>n;
            int x,y;
            char s;
            std::cin>>x>>y>>s;
            node *t = new node;
            node *temp = new node;
            t->data = x;
            t->left = t->right = NULL;
            temp->data = y;
            temp->left = temp->right = NULL;
            if ( s == 'L' ) t->left = temp;
            else if ( s == 'R' ) t->right = temp;
            for ( int i = 2 ; i <= n ; i++ ){
                int u,v;
                char w;
                std::cin>>u>>v>>w;
                t = insert(t,u,v,w);
            }
            PreOrder(t);
            std::queue<node*>q;
            q.push(t);
            while (!q.empty()){
                node *temp = q.front();
                q.pop();
                res.push_back(temp->data);
                if (temp->left != NULL) q.push(temp->left);
                if (temp->right != NULL) q.push(temp->right);
            }
            while (!q.empty()){
                node *temp = q.front(); q.pop();
                res.push_back(temp->data);
            }
            for ( int i = 0 ; i < res.size() ; i++ ){
                std::cout<<res[i]<<" ";
            }
            std::cout<<std::endl;
        }
            return 0;
    }
    
