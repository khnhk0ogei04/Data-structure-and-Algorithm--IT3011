#include<bits/stdc++.h>
const int MAXN = 1e4 + 1;
using namespace std;
    int n,m;
    std::vector<int>adj[MAXN];
    std::vector<std::pair<int,int>>v;
    bool visited[MAXN];
    void inp(){
        std::cin>>n>>m;
        for ( int i = 1 ; i <= m ; i++ ){
            int a,b;
            std::cin>>a>>b;
            adj[a].push_back(b);
            adj[b].push_back(a);
            std::pair<int,int>p;
            p = make_pair(a,b);
            v.push_back(p);
        }
    }
    void dfs1( int u ){
        visited[u] = true;
        for ( int v : adj[u] ){
            if (!visited[v]) 
            dfs1(v);
        }
    }
    void dfs2( int u , int s , int t ){
        visited[u] = true;
        for ( int v : adj[u] ){
            if ( (u == s && v == t) || ( u == t && v == s ) ) {
                continue;
            }
            if (!visited[v]) dfs2(v,s,t);
        }
    }
    int main(){
        inp();
        int cnt = 0,ans = 0;
        for( int i = 1 ; i <= n ; i++ ){
            if (!visited[i]) {
                cnt++;
                dfs1(i);
            }
        }
        for ( auto it: v ){
            int x = it.first, y = it.second;
            std::memset(visited,false,sizeof(visited));
            int cnt2 = 0;
                for ( int j = 1 ; j <= n ; j++ ){
                    if (!visited[j]){
                        cnt2++;
                        dfs2(j,x,y);
                    }
                }
                    if (cnt2 > cnt) ans++;
        }
        std::cout<<ans;
        return 0;
    }
    
    
    
    
