#include<bits/stdc++.h>
const int MAXN = 1e3 + 5;
using namespace std;
    std::vector<int>adj[MAXN];
    bool visited[MAXN];
    std::vector<int>res;
    int n,m,parent[MAXN];
    void inp(){
        std::cin>>n;
        for ( int i = 1 ; i <= n - 1 ; i++ ){
            int u,v;
            std::cin>>u>>v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        for ( int i = 1 ; i <= n ; i++ ){
            if (adj[i].size() == 1) {
            if ( i == 1 ) continue;    
            res.push_back(i);
        }
    }
    }
    void dfs( int u ){
        visited[u] = true;
        for ( int v : adj[u] ){
            if (!visited[v]){
                parent[v] = u;
                dfs(v);
            }
        }
    }
    void solve(){
        inp();
        dfs(1);
        std::memset(visited,false,sizeof(visited));
        for ( int i = 0 ; i < res.size() ; i++ ){
            std::vector<int>tmp;
            while (res[i] !=  1){
                tmp.push_back(res[i]);
                res[i] = parent[res[i]];
            }
            tmp.push_back(1);
            std::reverse(tmp.begin(),tmp.end());
            for ( auto x : tmp ){
                std::cout<<x<<" ";
            }
            std::cout<<std::endl;
        }
    }
    int main(){
        solve();
        return 0;
    }
    /* 5
       1 2
       1 3
       2 5
       2 4 */
