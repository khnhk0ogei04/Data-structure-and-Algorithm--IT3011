#include<bits/stdc++.h>
const int MAXN = 1e1+3;

    bool visited[MAXN];
    std::vector<int>adj[MAXN];
    int n,m,k;
    void inp(){
        std::cin>>n>>m>>k;
        for ( int i = 1 ; i <= m ; i++ ){
            int u,v;
            std::cin>>u>>v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

    }
    void dfs( int u ){
        visited[u] = true;
        for ( int v : adj[u] ){
            if (!visited[v]) dfs(v);
        }
    }
    int main(){
        inp();
        int tplt = 0;
        int tplt2 = 0, cnt = 0;
        for ( int i = 1 ; i <= n ; i++ ){
            if (!visited[i]) {
                tplt++;
                dfs(i);
            }
        }
        for ( int i = 1 ; i <= k ; i++ ){
            int u,v;
            std::cin>>u>>v;
            adj[u].push_back(v);
            adj[v].push_back(u);
            for ( int i = 1 ; i <= n ; i++ ){
            if (!visited[i]) {
                tplt2++;
                dfs(i);
                }
            }
            if (tplt2 != 1) {
                cnt++;
            }
            tplt2 = 0;
            std::memset(visited,0,sizeof(visited));
        }
        if (tplt == 1) std::cout<<"0";
        else {
        std::cout<<cnt + 1;
        }
        return 0;
    }
